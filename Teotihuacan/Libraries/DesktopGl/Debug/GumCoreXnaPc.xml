<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GumCoreXnaPc</name>
    </assembly>
    <members>
        <member name="P:Gum.DataTypes.Behaviors.ElementBehaviorReference.ProjectName">
            <summary>
            Currently unused - this will eventually be used to reference behaviors
            from different Gum projects.
            </summary>
        </member>
        <member name="M:Gum.DataTypes.DimensionUnitTypeExtensions.GetIsPixelBased(Gum.DataTypes.DimensionUnitType)">
            <summary>
            Returns whether one unit represents one pixel. 
            </summary>
            <param name="unitType">The unit type.</param>
            <returns>Whether one unit represents one pixel.</returns>
        </member>
        <member name="P:Gum.DataTypes.ElementSave.AllStates">
            <summary>
            Returns all states in the element including categorized states. For uncategorized states, see
            the States property.
            </summary>
        </member>
        <member name="P:Gum.DataTypes.GumLoadResult.ErrorMessage">
            <summary>
            Error message about why the load may have failed. This does not include errors about missing files - for missing files see the MissingFiles list.
            </summary>
            <remarks>
            Errors include situations like a malformed XML file - errors which tools like Gum cannot recover from. Missing files, while resulting
            in an incomplete load, do not put the project in an unusable state, so we do not consider them errors.
            </remarks>
        </member>
        <member name="T:Gum.DataTypes.GumProjectSave">
            <summary>
            Represents the data stored in a .gumx file. GumProjectSave
            instances can be XML Serialized to a .gumx file.
            </summary>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSave.GetValue(System.String)">
            <summary>
            Attempts to get the value for the argument variableName, or null if not found.
            </summary>
            <param name="variableName">The qualified variable name</param>
            <returns>The value found, or null</returns>
        </member>
        <member name="T:Gum.DataTypes.Variables.VariableSaveValues">
            <summary>
            Struct representation of VariableSave which can be used in situations where
            heap allocation should not occur
            </summary>
        </member>
        <member name="P:Gum.DataTypes.Variables.VariableSave.ExposedAsName">
            <summary>
            If a Component contains an instance then the variable
            of that instance is only editable inside that component.
            The user must explicitly expose that variable.  If the variable
            is exposed then this variable is set.
            </summary>
        </member>
        <member name="P:Gum.DataTypes.Variables.VariableSave.SetsValue">
            <summary>
            Determines whether a null value should be set, or whether the variable is
            an ignored value.  If this value is true, then null values will be set on the underlying data.
            </summary>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSaveExtensionMethods.Initialize(Gum.DataTypes.Variables.StateSave)">
            <summary>
            Fixes enumeration values and sorts all variables alphabetically
            </summary>
            <param name="stateSave">The state to initialize.</param>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSaveExtensionMethods.AssignVariableSave(Gum.DataTypes.Variables.StateSave,System.String,System.Object,Gum.DataTypes.InstanceSave,System.String,System.Boolean)">
            <summary>
            Assigns a value to a variable.  If the variable doesn't exist then the variable is instantiated, then the value is assigned.
            </summary>
            <param name="stateSave">The StateSave that contains the variable.  The variable will be added to this StateSave if it doesn't exist.</param>
            <param name="variableName">The name of the variable to look for.</param>
            <param name="value">The value to assign to the variable.</param>
            <param name="instanceSave">The instance that owns this variable.  This may be null.</param>
            <param name="variableType">The type of the variable.  This is only needed if the value is null.</param>
        </member>
        <member name="T:Gum.DataTypes.RecursiveVariableFinder">
            <summary>
            Class that can find variables
            and values recursively.  There's
            so many different ways that this
            happens that this consolidates all
            logic in one place
            </summary>
        </member>
        <member name="M:Gum.DataTypes.VariableSaveExtensionMethods.FixEnumerations(Gum.DataTypes.Variables.VariableSave)">
            <summary>
            Converts integer values to their corresponding enumeration values. This should be called
            after variable saves are loaded from XML.
            </summary>
            <param name="variableSave">The VariableSave to fix.</param>
            <returns>Whether any changes were made.</returns>
        </member>
        <member name="M:Gum.Managers.ObjectFinder.GetElementsReferencing(Gum.DataTypes.ElementSave,System.Collections.Generic.List{Gum.DataTypes.ElementSave},System.Collections.Generic.List{Gum.DataTypes.InstanceSave})">
            <summary>
            Returns a list of Elements that include InstanceSaves that use the argument
            elementSave as their BaseType, or that use an ElementSave deriving from elementSave
            as their BaseType.
            </summary>
            <param name="elementSave">The ElementSave to search for.</param>
            <returns>A List containing all Elements</returns>
        </member>
        <member name="T:Gum.Wireframe.GraphicalUiElement">
            <summary>
            The base object for all Gum runtime objects. It contains functionality for
            setting variables, states, and perofrming layout. The GraphicalUiElement can
            wrap an underlying rendering object.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.EffectiveManagers">
            <summary>
            Returns this instance's SystemManagers, or climbs up the parent/child relationship
            until a non-null SystemsManager is found. Otherwise, returns null.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.CanvasWidth">
            <summary>
            The X "world units" that the entire gum rendering system uses. This is essentially the "top level" container's width.
            For a game which renders at 1:1, this will match the game's resolution. 
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.CanvasHeight">
            <summary>
            The Y "world units" that the entire gum rendering system uses. This is essentially the "top level" container's height.
            For a game which renders at 1:1, this will match the game's resolution. 
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.RenderingLibrary#IPositionedSizedObject#X">
            <summary>
            The X position of this object as an IPositionedSizedObject. This does not consider origins
            so it will use the default origin, which is top-left for most types.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.RenderingLibrary#IPositionedSizedObject#Y">
            <summary>
            The Y position of this object as an IPositionedSizedObject. This does not consider origins
            so it will use the default origin, which is top-left for most types.
            </summary>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.GetAbsoluteWidth">
            <summary>
            Returns the absolute width of the GraphicalUiElement in pixels (as opposed to using its WidthUnits)
            </summary>
            <returns>The absolute width in pixels.</returns>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.GetAbsoluteHeight">
            <summary>
            Returns the absolute height of the GraphicalUiElement in pixels (as opposed to using its HeightUnits)
            </summary>
            <returns>The absolute height in pixels.</returns>
        </member>
        <member name="F:Gum.Wireframe.GraphicalUiElement.mSortableLayer">
            <summary>
            Used for clipping.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.ElementGueContainingThis">
            <summary>
            The ScreenSave or Component which contains this instance.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.ContainedElements">
            <summary>
            Returns an enumerable for all GraphicalUiElements that this contains.
            </summary>
            <remarks>
            Since this is an interface using ContainedElements in a foreach allocates memory
            and this can actually be significant in a game that updates its UI frequently.
            </remarks>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.Children">
            <summary>
            Returns the direct hierarchical children of this. Note that this does not return all objects contained in the element. 
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.AbsoluteX">
            <summary>
            Returns the absolute X of the origin of the GraphicalUiElement. Note that
            this considers the XOrigin, and will apply rotation
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.AbsoluteY">
            <summary>
            Returns the absolute Y of the origin of the GraphicalUiElement. Note that
            this considers the YOrigin, and will apply rotation
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.TextureTop">
            <summary>
            The pixel coorinate of the top of the displayed region.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.TextureLeft">
            <summary>
            The pixel coorinate of the left of the displayed region.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.TextureWidth">
            <summary>
            The pixel width of the displayed region.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.TextureHeight">
            <summary>
            The pixel height of the displayed region.
            </summary>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.SetInitialState">
            <summary>
            Sets the default state.
            </summary>
            <remarks>
            This function is virtual so that derived classes can override it
            and provide a quicker method for setting default states
            </remarks>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.GetGraphicalUiElementByName(System.String)">
            <summary>
            Searches for and returns a GraphicalUiElement in this instance by name. Returns null
            if not found.
            </summary>
            <param name="name">The case-sensitive name to search for.</param>
            <returns>The found GraphicalUiElement, or null if no match is found.</returns>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.GetGraphicalUiElementByName(System.String[])">
            <summary>
            Performs a recursive search for graphical UI elements, where eacn name in the parameters
            is the name of a GraphicalUiElement one level deeper than the last.
            </summary>
            <param name="names">The names to search for, allowing retrieval multiple levels deep.</param>
            <returns>The found element, or null if no match is found.</returns>
        </member>
        <member name="E:Gum.Wireframe.GraphicalUiElement.LosePush">
            <summary>
            Event which is raised whenever this loses a push. A push occurs when the
            cursor is over this window and the left moue button is pushed. A push is lost
            if the left mouse button is released or if the user moves the cursor so that it
            is no longer over this while the mouse button is pressed. 
            </summary>
            <remarks>
            LosePush is often used to change the state of a button back to its regular state.
            </remarks>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.TryHandleCursorActivity(FlatRedBall.Gui.Cursor,Gum.Wireframe.GraphicalUiElement.HandledActions)">
            <summary>
            Tries to handle cursor activity. If this returns true, then either this element or one of its
            children handled the activity. 
            </summary>
            <param name="cursor">Reference to the cursor object</param>
            <returns>Whether this or one of its children handled the cursor activity, blocking other windows from receiving cursor input this frame.</returns>
            <remarks>This method will always allow children to handle the activity first, as children draw in front of their parents. Only components
            can have UI elements. Standard elements such as Sprites or Containers cannot themselves handle the activity, but they do give their children the
            opportunity to handle activity. This is because components (such as buttons) may be part of a container for stacking or other organization.
            
            Ultimately this hierarchical logic exists because only the top-most parent is added to the GuiManager, and it is responsible for
            giving its children the opportunity to perform cursor-related input. </remarks>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.Destroy">
            <summary>
            Completely removes the GraphicalUiElement from rendering managers, UI 
            </summary>
        </member>
        <member name="M:Gum.MonoGameIntegration.RuntimeLogic.LoadGumProject(System.String)">
            <summary>
            Loads a Gum project and fully initializes it for runtime use.
            </summary>
            <param name="fileName">The .gumx file name (typically relative to the executable) to load.</param>
            <returns>The fully-initialized GumProjectSave</returns>
        </member>
        <member name="T:RenderingLibrary.Content.ContentLoader">
            <summary>
            Provides a simple implementation of IContentLoader for applications
            using the LoaderManager and not specifying their own custom ContentLoader.
            This content loader uses the default SystemManagers internally.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Content.LoaderManager.Load(System.String,RenderingLibrary.SystemManagers)">
            <summary>
            Loads a Texture2D from a file name.  Supports
            .tga, png, jpg, and .gif.
            </summary>
            <param name="fileName">The name of the file (full file name) to load from.</param>
            <param name="managers">The SystemManagers to pull the GraphicsDevice for.  A valid
            GraphicsDevice is needed to load Texture2D's.  If "null" is passed, then the singleton
            Renderer will be used.  </param>
            <returns></returns>
        </member>
        <member name="F:RenderingLibrary.Graphics.AnimationFrame.SourceRectangle">
            <summary>
            The source rectangle to display.  If this is null then the entire source file is used.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Graphics.AnimationFrame.FrameTime">
            <summary>
            The amount of time to show the frame for in seconds.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.BitmapFont.RenderToTexture2D(System.Collections.Generic.List{System.String},RenderingLibrary.Graphics.HorizontalAlignment,RenderingLibrary.SystemManagers,Microsoft.Xna.Framework.Graphics.Texture2D,System.Object)">
            <summary>
            
            </summary>
            <param name="lines"></param>
            <param name="horizontalAlignment"></param>
            <param name="managers"></param>
            <param name="toReplace"></param>
            <param name="objectRequestingRender"></param>
            <param name="charLocations">Used to store char locations for drawing directly to screen.</param>
            <returns></returns>
        </member>
        <member name="M:RenderingLibrary.Graphics.BitmapFont.RenderAtlasedTextureToScreen(System.Collections.Generic.List{System.String},RenderingLibrary.Graphics.HorizontalAlignment,System.Single,Microsoft.Xna.Framework.Color,System.Single,System.Single,RenderingLibrary.SystemManagers,RenderingLibrary.Graphics.SpriteRenderer,System.Object)">
            <summary>
            Used for rendering directly to screen with an atlased texture.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.ImageData.RemoveRow(System.Int32)">
            <summary>
            Removes the index row from the contained data.  Row 0 is the top of the texture.
            </summary>
            <param name="rowToRemove">The index of the row to remove.  Index 0 is the top row.</param>
        </member>
        <member name="M:RenderingLibrary.Graphics.IRenderable.PreRender">
            <summary>
            Perform logic which needs to occur before a SpriteBatch has been started
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.Layer.SortRenderables">
            <summary>
            This is a stable sort on Z.  It's incredibly fast on already-sorted lists so we'll do this over something like the built-in 
            binary sorts that .NET offers.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.NineSlice.LoadAtlasedTexture(System.String,RenderingLibrary.Graphics.AtlasedTexture)">
            <summary>
            Loads given texture(s) from atlas.
            </summary>
            <param name="valueAsString"></param>
            <param name="atlasedTexture"></param>
        </member>
        <member name="M:RenderingLibrary.Graphics.NineSlice.SetTexturesUsingPattern(System.String,RenderingLibrary.SystemManagers,System.Boolean)">
            <summary>
            
            </summary>
            <param name="anyOf9Textures"></param>
            <param name="managers"></param>
            <param name="inAtlas">True if textures are atlased.</param>
        </member>
        <member name="F:RenderingLibrary.Graphics.Renderer.SinglePixelSourceRectangle">
            <summary>
            The rectangle to use when rendering single-pixel texture objects, such as ColoredRectangles.
            By default this is null, indicating the entire texture is used.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.Renderer.NormalBlendState">
            <summary>
            Controls which XNA BlendState is used for the Rendering Library's Blend.Normal value.
            </summary>
            <remarks>
            This should be either NonPremultiplied (if textures do not use premultiplied alpha), or
            AlphaBlend if using premultiplied alpha textures.
            </remarks>
        </member>
        <member name="M:RenderingLibrary.Graphics.Renderer.ForceEnd">
            <summary>
            Ends the current SpriteBatchif it hasn't yet been ended. This is needed for projects which may need the
            rendering to end itself so that they can start sprite batch.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Graphics.Text.mPreRenderWidth">
            <summary>
            Stores the width of the text object's texture before it has had a chance to render, not including
            the FontScale.
            </summary>
            <remarks>
            A text object may need to be positioned according to its dimensions. Normally this would
            use a text's render target texture. In some situations (before the render pass has occurred,
            or when using character-by-character rendering), the text may not have a render target texture.
            Therefore, the pre-rendered values provide size information.
            </remarks>
        </member>
        <member name="F:RenderingLibrary.Graphics.Text.mPreRenderHeight">
            <summary>
            Stores the height of the text object's texture before it has had a chance to render, not including
            the FontScale.
            </summary>
            <remarks>
            See mPreRenderWidth for more information about this member.
            </remarks>
        </member>
        <member name="P:RenderingLibrary.Graphics.Text.WrappedTextWidth">
            <summary>
            The width needed to display the wrapped text. 
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.SolidRectangle.GetAtlasedTexture">
            <summary>
            Checks if the Colored Rectangle texture is located in a loaded atlas.
            </summary>
            <returns>Returns atlased texture if it exists.</returns>
        </member>
        <member name="M:RenderingLibrary.IPositionedSizedObjectExtensionMethods.GetAbsoluteX(RenderingLibrary.Graphics.IRenderableIpso)">
            <summary>
            Returns the world X coordinate of the argument RenderableIpso.
            </summary>
            <param name="ipso">The RenderableIpso to return the value for.</param>
            <returns>The world X coordinate.</returns>
        </member>
        <member name="M:RenderingLibrary.IPositionedSizedObjectExtensionMethods.GetAbsoluteY(RenderingLibrary.Graphics.IRenderableIpso)">
            <summary>
            Returns the world Y coordinate of the argument RenderableIpso.
            </summary>
            <param name="ipso">The RenderableIpso to return the value for.</param>
            <returns>The world Y coordinate.</returns>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePolygon.IsPointInside(System.Single,System.Single)">
            <summary>
            Returns whether the world X, Y values are inside of the polygon.
            </summary>
            <param name="worldX">The coordinate in world coordinates.</param>
            <param name="worldY"></param>
            <returns>Whether the argument x,y values are inside of the polygon.</returns>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePolygon.PointAt(System.Int32)">
            <summary>
            Returns the X,Y of the point at the argument index in object space (relative to the object's position)
            </summary>
            <param name="index">The 0-based index.</param>
            <returns>The position of the point at the argument index in object space.</returns>
        </member>
        <member name="P:RenderingLibrary.Math.Geometry.LinePrimitive.BreakIntoSegments">
            <summary>
            Determines whether the line is broken up into separate segments or
            if it should be treated as one continual line.  This defaults to false.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Math.Geometry.LinePrimitive.mVectors">
            <summary>
            The list of points relative to the LinePrimitive (in object space)
            </summary>
        </member>
        <member name="F:RenderingLibrary.Math.Geometry.LinePrimitive.Color">
            <summary>
            Gets/sets the color of the primitive line object.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Math.Geometry.LinePrimitive.Position">
            <summary>
            Gets/sets the position of the primitive line object.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Math.Geometry.LinePrimitive.Depth">
            <summary>
            Gets/sets the render depth of the primitive line object (0 = front, 1 = back)
            </summary>
        </member>
        <member name="P:RenderingLibrary.Math.Geometry.LinePrimitive.VectorCount">
            <summary>
            Gets the number of vectors which make up the primtive line object.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates a new primitive line object.
            </summary>
            <param name="singlePixelTexture">The texture to use when rendering the line.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Add(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a vector to the LinePrimitive object. The position is relative to the position of the LinePrimitive (object space)
            </summary>
            <param name="vector">The vector to add.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Add(System.Single,System.Single)">
            <summary>
            Adds a vector to the LinePrimitive object.
            </summary>
            <param name="x">The X position of the new point.</param>
            <param name="y">The Y position of the new point.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Insert(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Insers a vector into the primitive line object.
            </summary>
            <param name="index">The index to insert it at.</param>
            <param name="vector">The vector to insert.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Remove(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Removes a vector from the primitive line object.
            </summary>
            <param name="vector">The vector to remove.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.RemoveAt(System.Int32)">
            <summary>
            Removes a vector from the primitive line object.
            </summary>
            <param name="index">The index of the vector to remove.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Replace(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Replaces a vector at the given index with the argument Vector2.
            </summary>
            <param name="index">What index to replace.</param>
            <param name="whatToReplaceWith">The new vector that will be placed at the given index</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.ClearVectors">
            <summary>
            Clears all vectors from the primitive line object.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Render(RenderingLibrary.Graphics.SpriteRenderer,RenderingLibrary.SystemManagers)">
            <summary>
            Renders the primtive line object.
            </summary>
            <param name="spriteRenderer">The sprite renderer to use to render the primitive line object.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.CreateCircle(System.Single,System.Int32)">
            <summary>
            Creates a circle starting from 0, 0.
            </summary>
            <param name="radius">The radius (half the width) of the circle.</param>
            <param name="sides">The number of sides on the circle (the more the detailed).</param>
        </member>
        <member name="P:RenderingLibrary.Math.Geometry.LineRectangle.LocalVisible">
            <summary>
            This is similar to the Visible property, but affects only this.
            This allows LineRectangles to not render without making their children invisible.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Math.MathFunctions.RotatePointAroundPoint(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point@,System.Single)">
            <summary>
            Rotates a Point around another Point by a given number of radians.
            </summary>
            <param name="basePoint">Point to rotate around.</param>
            <param name="pointToRotate">Point to rotate (changes position).</param>
            <param name="radiansToChangeBy">Radians to rotate by.</param>
        </member>
        <member name="T:ToolsUtilities.FileManager">
            <summary>
            Utility class used to help dealing with files.
            </summary>
            <remarks>
            This code is a copy of code from FlatRedBall.  It's ok,
            Victor Chelaru wrote that code and he's the one who put it in here.
            </remarks>
        </member>
        <member name="M:ToolsUtilities.FileManager.GetExtension(System.String)">
            <summary>
            Returns the extension in a filename.
            </summary>
            <remarks>
            The extension returned will not contain a period.
            
            <para>
            <code>
            // this code will return a string containing "png", not ".png"
            FileManager.GetExtension(@"FolderName/myImage.png");
            </code>
            </para>
            </remarks>
            <param name="fileName">The filename.</param>
            <returns>Returns the extension or an empty string if no period is found in the filename.</returns>
        </member>
        <member name="M:ToolsUtilities.FileManager.RemoveExtension(System.String)">
            <summary>
            Returns the fileName without an extension, or makes no changes if fileName has no extension.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The file name with extension removed if an extension existed.</returns>
        </member>
        <member name="M:ToolsUtilities.FileManager.RemovePath(System.String@)">
            <summary>
            Modifies the fileName by removing its path, or makes no changes if the fileName has no path.
            </summary>
            <param name="fileName">The file name to change</param>
        </member>
        <member name="M:ToolsUtilities.FileManager.RemovePath(System.String)">
            <summary>
            Returns the fileName without a path, or makes no changes if the fileName has no path.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The modified fileName if a path is found.</returns>
        </member>
        <member name="M:ToolsUtilities.FileManager.GetAllFilesInDirectory(System.String,System.String)">
            <summary>
            Returns a List containing all files which match the fileType argument which are 
            in the directory argument or a subfolder.  This recurs, returning all files.
            </summary>
            <param name="directory">String representing the directory to search.  If an empty
            string is passed, the method will search starting in the directory holding the .exe.</param>
            <param name="fileType">The file type to search for specified as an extension.  The extension
            can either have a period or not.  That is ".jpg" and "jpg" are both valid fileType arguments.  An empty
            or null value for this parameter will return all files regardless of file type.</param>
            <returns>A list containing all of the files found which match the fileType.</returns>
        </member>
        <member name="M:ToolsUtilities.FileManager.GetAllFilesInDirectory(System.String,System.String,System.Int32)">
            <summary>
            Returns a List containing all files which match the fileType argument which are within
            the depthToSearch folder range relative to the directory argument.
            </summary>
            <param name="directory">String representing the directory to search.  If an empty
            string is passed, the method will search starting in the directory holding the .exe.</param>
            <param name="fileType">The file type to search for specified as an extension.  The extension
            can either have a period or not.  That is ".jpg" and "jpg" are both valid fileType arguments.  An empty
            or null value for this parameter will return all files regardless of file type.</param>
            <param name="depthToSearch">The depth to search through.  If the depthToSearch
            is 0, only the argument directory will be searched.</param>
            <returns>A list containing all of the files found which match the fileType.</returns>
        </member>
        <member name="P:ToolsUtilities.FileManager.UserApplicationDataForThisApplication">
            <summary>
            Returns a full path for a folder which can be used to save user data. 
            </summary>
            <example>
            System.IO.File.SaveText("File Contents", FlatRedBall.UserApplicationDataForThisApplication + "File.txt");
            </example>
        </member>
        <member name="M:ToolsUtilities.StringFunctions.GetIntAfter(System.String,System.String)">
            <summary>
            Returns the first integer found after the argument stringToSearchFor in whereToSearch.
            </summary>
            <remarks>
            This method is used to help simplify parsing of text files and data strings.
            If stringToSearchFor is "Y:" and whereToSearch is "X: 30, Y:32", then the value
            of 32 will be returned.
            </remarks>
            <param name="stringToSearchFor">The string pattern to search for.</param>
            <param name="whereToSearch">The string that will be searched.</param>
            <returns>The integer value found after the argument stringToSearchFor.</returns>
        </member>
        <member name="M:ToolsUtilities.StringFunctions.GetIntAfter(System.String,System.String,System.Int32)">
            <summary>
            Returns the first integer found after the argument stringToSearchFor.  The search begins
            at the argument startIndex.
            </summary>
            <param name="stringToSearchFor">The string pattern to search for.</param>
            <param name="whereToSearch">The string that will be searched.</param>
            <param name="startIndex">The index to begin searching at.  This method
            will ignore any instances of stringToSearchFor which begin at an index smaller
            than the argument startIndex.</param>
            <returns></returns>
        </member>
        <member name="M:ToolsUtilities.StringFunctions.IncrementNumberAtEnd(System.String)">
            <summary>
            Increments the number at the end of a string or adds a number if none exists.
            </summary>
            <remarks>
            This method begins looking at the end of a string for numbers and moves towards the beginning of the string
            until it encounters a character which is not a numerical digit or the beginning of the string.  "Sprite123" would return
            "Sprite124", and "MyString" would return "MyString1".
            </remarks>
            <param name="originalString">The string to "increment".</param>
            <returns>Returns a string with the number at the end incremented, or with a number added on the end if none existed before.</returns>
        </member>
        <member name="M:ToolsUtilities.StringFunctions.InsertSpacesInCamelCaseString(System.String)">
            <summary>
            Inserts spaces before every capital letter in a camel-case
            string.  Ignores the first letter.
            </summary>
            <remarks>
            For example "HelloThereIAmCamelCase" becomes
            "Hello There I Am Camel Case".
            </remarks>
            <param name="originalString">The string in which to insert spaces.</param>
            <returns>The string with spaces inserted.</returns>
        </member>
        <member name="F:FlatRedBall.Gum.Animation.GumAnimation.namedEvents">
            <summary>
            List of named events, used when the animation is played.
            </summary>
            <remarks>
            This is not a Dictionary becuase we want to allow the same event name
            to appear multiple times. For example, a user might create a "Bounce" event
            where a sound effect plays. An animation may bounce multiple times, so the same
            event might be added in multiple spots.
            </remarks>
        </member>
        <member name="P:FlatRedBall.Gum.GumIdb.DisableDrawing">
            <summary>
            Makes the Gum IDB skip its rendering code. This can be used to isolate rendering performance bottlenecks.
            </summary>
        </member>
        <member name="F:FlatRedBall.Gum.GumIdb.mLastDrawCall">
            <summary>
            Variable that stores the last draw call. It is used to determine if drawing a new frame.
            </summary>
        </member>
    </members>
</doc>
